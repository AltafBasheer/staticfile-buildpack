#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e            # fail fast
set -o pipefail   # do not ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2

compile_buildpack_dir=$(cd $(dirname $0); cd ..; pwd)
compile_buildpack_bin=$compile_buildpack_dir/bin
$compile_buildpack_dir/compile-extensions/bin/check_stack_support

if [ -e $cache_dir/STAGED_BUILDPACK_VERSION ]; then
  PREV_STAGE_BUILDPACK_VERSION=$(cat $cache_dir/STAGED_BUILDPACK_VERSION)
  CURR_STAGE_BUILDPACK_VERSION=$(cat $compile_buildpack_dir/VERSION)
  if [[ PREV_STAGE_BUILDPACK_VERSION != CURR_STAGE_BUILDPACK_VERSION ]]; then
    echo "WARNING: buildpack version changed from $PREV_STAGE_BUILDPACK_VERSION to $CURR_STAGE_BUILDPACK_VERSION"
  fi
fi

# Load some convenience functions like status(), echo(), and indent()
source $compile_buildpack_dir/bin/common.sh

BUILDPACK_PATH=$compile_buildpack_dir source $compile_buildpack_dir/compile-extensions/lib/common

default_nginx_version="$($compile_buildpack_dir/compile-extensions/bin/default_version_for $compile_buildpack_dir/manifest.yml nginx)"
echo "Using Nginx version $default_nginx_version"

translated_url=$($compile_buildpack_dir/compile-extensions/bin/download_dependency nginx-$default_nginx_version.tgz /tmp)
echo "Downloaded [$translated_url]"

compile_nginx_tgz="/tmp/nginx-$default_nginx_version.tgz"
cd $build_dir

# Alternate root location (default is root of project) for html/js/css
# root: dist/
if [[ -e "Staticfile" && "$(grep 'root:' Staticfile)X" != "X" ]]; then
  root_dir=$(grep 'root:' Staticfile | sed -e 's/^root: *//;s/\s*$//')
  status "Root folder $root_dir"
else
  status "Using root folder"
fi
root_dir=${root_dir:-.}
if [[ ! -e ${root_dir} ]] ; then
  error "the application Staticfile specifies a root directory \`${root_dir}\` that does not exist"
fi
if [[ ! -d ${root_dir} ]] ; then
  error "the application Staticfile specifies a root directory \`${root_dir}\` that is a plain file, but was expected to be a directory"
fi

if [[ -e "Staticfile" && "$(grep 'host_dot_files: true' Staticfile)X" != "X" ]]; then
  host_dotfiles=true
else
  host_dotfiles=false
fi

status "Copying project files into public/"
shopt -s extglob
root_dir_absolute=`cd $root_dir 2>/dev/null && pwd -P`
if [ ${build_dir}/public != ${root_dir_absolute} ]; then
  tmp_dir=`mktemp -d /tmp/XXXXX`

  if [[ "$host_dotfiles" = true ]]; then
    shopt -s dotglob
    mv $root_dir_absolute/!(Staticfile|Staticfile.auth|manifest.yml|stackato.yml|.profile|.|..) $tmp_dir || true
  else
    mv $root_dir_absolute/!(Staticfile|Staticfile.auth|manifest.yml|stackato.yml) $tmp_dir || true
  fi

  rm -rf $build_dir/public
  mv $tmp_dir  $build_dir/public
fi
shopt -u extglob
shopt -u dotglob



status "Setting up nginx"
tar xzf $compile_nginx_tgz
cp -f $compile_buildpack_dir/conf/nginx.conf nginx/conf/nginx.conf
cp -f $compile_buildpack_dir/conf/mime.types nginx/conf/mime.types

[[ -f $build_dir/public/nginx.conf ]] && mv $build_dir/public/nginx.conf nginx/conf/nginx.conf
[[ -f $build_dir/public/mime.types ]] && mv $build_dir/public/mime.types nginx/conf/mime.types

if [[ -f Staticfile.auth ]]; then
  status "Enabling basic authentication using Staticfile.auth"
  mv Staticfile.auth nginx/conf/.htpasswd
  protip "Learn about basic authentication" "http://docs.cloudfoundry.org/buildpacks/staticfile/index.html#authentication"
fi

if [[ "$host_dotfiles" = true ]]; then
  status "Enabling hosting of dotfiles"
  touch nginx/conf/.enable_dotfiles
fi

# Enable directory index
if [[ -e "Staticfile" && "$(grep 'directory:' Staticfile)X" != "X" ]]; then
  status "Enabling directory index for folders without index.html files"
  touch nginx/conf/.enable_directory_index
fi

# Enable ssi module
if [[ -e "Staticfile" && "$(grep 'ssi: enabled' Staticfile)X" != "X" ]]; then
  status "Enabling ssi"
  touch nginx/conf/.enable_ssi
fi

# Enable pushstate module
if [[ -e "Staticfile" && "$(grep 'pushstate: enabled' Staticfile)X" != "X" ]]; then
  status "Enabling pushstate"
  touch nginx/conf/.enable_pushstate
fi

# Enable HSTS
if [[ -e "Staticfile" && "$(grep 'http_strict_transport_security: true' Staticfile)X" != "X" ]]; then
  status "Enabling HSTS"
  touch nginx/conf/.enable_hsts
fi

cp $compile_buildpack_bin/boot.sh .
cp $compile_buildpack_dir/VERSION $cache_dir/STAGED_BUILDPACK_VERSION